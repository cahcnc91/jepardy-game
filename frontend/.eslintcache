[{"/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/App.js":"1","/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/components/usePoints.js":"2","/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/components/AppBar.js":"3","/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/routes/Home.js":"4","/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/routes/Game.js":"5","/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/components/Header.js":"6","/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/routes/AddQuestions.js":"7","/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/components/useForm.js":"8","/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/index.js":"9","/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/reportWebVitals.js":"10"},{"size":1060,"mtime":1608232182183,"results":"11","hashOfConfig":"12"},{"size":595,"mtime":1607992044899,"results":"13","hashOfConfig":"12"},{"size":313,"mtime":1608225433787,"results":"14","hashOfConfig":"12"},{"size":1850,"mtime":1608227406825,"results":"15","hashOfConfig":"12"},{"size":1371,"mtime":1608226649277,"results":"16","hashOfConfig":"12"},{"size":1060,"mtime":1608226934326,"results":"17","hashOfConfig":"12"},{"size":2999,"mtime":1608232839626,"results":"18","hashOfConfig":"12"},{"size":280,"mtime":1608228769710,"results":"19","hashOfConfig":"12"},{"size":543,"mtime":1607991556818,"results":"20","hashOfConfig":"12"},{"size":362,"mtime":1607990792690,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1t3w12z",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/App.js",[],["45","46"],"/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/components/usePoints.js",["47"],"/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/components/AppBar.js",[],"/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/routes/Home.js",[],"/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/routes/Game.js",["48"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport Header from \"../components/Header\";\nimport CategoryRow from \"../components/CategoryRow\";\n\nconst Game = ({ players }) => {\n  const [categories, setCategories] = useState({});\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      const data = await fetch(\"http://localhost:5000/all-categories\");\n      if (data.ok) {\n        const list = await data.json();\n        setCategories(list);\n        setLoading(false);\n      } else {\n        setError(\"Something went wrong, please refresh the page.\");\n      }\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <Fragment>\n      <Header players={players} />\n      {loading ? (\n        <Loader active inline=\"centered\" />\n      ) : (\n        <Grid padded style={{ display: \"flex\", width: \"100%\" }}>\n          <CategoryRow data={categories.history} title=\"History\" />\n          <CategoryRow data={categories.computer} title=\"Computer\" />\n          <CategoryRow data={categories.tv} title=\"Tv Shows\" />\n          <CategoryRow data={categories.science} title=\"Science\" />\n          <CategoryRow data={categories.general} title=\"General Knowledge\" />\n        </Grid>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Game;\n","/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/components/Header.js",[],"/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/routes/AddQuestions.js",["49","50","51"],"import React, { Fragment, useState } from \"react\";\nimport { Grid, Form, Button, GridRow, Icon } from \"semantic-ui-react\";\nimport { useForm } from \"../components/useForm\";\n\nconst optionsCat = [\n  { key: \"1\", text: \"Computer\", value: \"computer\" },\n  { key: \"2\", text: \"History\", value: \"history\" },\n  { key: \"3\", text: \"General Knowledge\", value: \"general\" },\n  { key: \"4\", text: \"Tv Shows\", value: \"tv\" },\n  { key: \"5\", text: \"Science\", value: \"science\" },\n];\n\nconst optionsDiff = [\n  { key: \"1d\", text: \"100\", value: 100 },\n  { key: \"2d\", text: \"200\", value: 200 },\n  { key: \"3d\", text: \"300\", value: 300 },\n  { key: \"4d\", text: \"400\", value: 400 },\n  { key: \"5d\", text: \"500\", value: 500 },\n];\n\nconst AddQuestions = () => {\n  const [success, setSuccess] = useState(false);\n  const [form, changeForm] = useForm({\n    question: \"\",\n    category: \"computer\",\n    answer: \"\",\n    difficulty: 100,\n  });\n\n  const submitQuestion = async () => {\n    fetch(\"http://localhost:5000/create\", {\n      method: \"POST\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify(form),\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        setSuccess(true);\n      });\n  };\n\n  return (\n    <Fragment>\n      <Grid style={{ display: \"flex\", width: \"100%\", padding: \"5rem\" }}>\n        <Grid.Row>\n          <h2>Add question to database</h2>\n        </Grid.Row>\n        {success ? (\n          <h3 style={{ padding: 0 }}>\n            Success! You have submitted a question to out db!\n          </h3>\n        ) : (\n          <Form style={{ width: \"50%\", padding: 0 }}>\n            <Form.Group style={{ display: \"flex\", flexDirection: \"column\" }}>\n              <Form.Input\n                label=\"Question\"\n                id=\"question\"\n                value={form.question}\n                onChange={changeForm}\n                className=\"form-input\"\n              />\n              <Form.Input\n                label=\"Answer\"\n                id=\"answer\"\n                value={form.answer}\n                onChange={changeForm}\n                className=\"form-input\"\n              />\n              <Form.Select\n                id={\"category\"}\n                label=\"Category\"\n                options={optionsCat}\n                onChange={changeForm}\n                defaultValue={\"computer\"}\n                className=\"form-input\"\n              />\n              <Form.Select\n                id=\"difficulty\"\n                label=\"Difficulty\"\n                options={optionsDiff}\n                defaultValue={100}\n                onChange={changeForm}\n                className=\"form-input\"\n              />\n              <Form.Button\n                primary={true}\n                padding\n                onClick={() => submitQuestion()}\n              >\n                Submit\n              </Form.Button>\n            </Form.Group>\n          </Form>\n        )}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default AddQuestions;\n","/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/components/useForm.js",[],"/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/index.js",[],"/Users/camila_niero_costa_coder/Desktop/cs50-final-project/frontend/src/reportWebVitals.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":13},{"ruleId":"56","severity":1,"message":"60","line":8,"column":10,"nodeType":"58","messageId":"59","endLine":8,"endColumn":15},{"ruleId":"56","severity":1,"message":"61","line":2,"column":22,"nodeType":"58","messageId":"59","endLine":2,"endColumn":28},{"ruleId":"56","severity":1,"message":"62","line":2,"column":30,"nodeType":"58","messageId":"59","endLine":2,"endColumn":37},{"ruleId":"56","severity":1,"message":"63","line":2,"column":39,"nodeType":"58","messageId":"59","endLine":2,"endColumn":43},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'Button' is defined but never used.","'GridRow' is defined but never used.","'Icon' is defined but never used.","no-global-assign","no-unsafe-negation"]